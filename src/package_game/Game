package section12_game;

import java.util.Random;
import java.util.Scanner;

public class Game {
    public static void main(String[] args) {
        playGame();
    }

    private static void playGame() {
        printTableMapping();

        char[][] gameTable = {
                {' ', ' ', ' '},
                {' ', ' ', ' '},
                {' ', ' ', ' '},
        };

        if (new Random().nextBoolean()) {
            makeComputerMove(gameTable);
            printGameTable(gameTable);
            System.out.println("Computer made a move.");
        }


        while (true) {

            makeUserMove(gameTable);

            printGameTable(gameTable);

            if (isUserWin(gameTable)) {
                System.out.println("YOU WIN!");
                break;
            } else if (isDraw(gameTable)) {
                System.out.println("Sorry, DRAW!");
                break;
            }

            makeComputerMove(gameTable);
            printGameTable(gameTable);
            System.out.println("Computer made a move.");

            if (isComputerWin(gameTable, '0')) {
                System.out.println("COMPUTER WIN");
                break;
            } else if (isDraw(gameTable)) {
                System.out.println("Sorry, DRAW!");
                break;
            }
        }
        System.out.println("GAME OVER");

    }

    private static void printTableMapping() {
        char[][] mappingTable = {
                {'7', '8', '9'},
                {'4', '5', '6'},
                {'1', '2', '3'},
        };
        printGameTable(mappingTable);
    }

    private static void printGameTable(char[][] gameTable) {
        for (int i = 0; i < 3; i++) {
            System.out.println("-------------");
            for (int j = 0; j < 3; j++) {
                System.out.print("| " + gameTable[i][j] + " ");
            }
            System.out.println("|");
        }
        System.out.println("-------------");
    }

    private static void makeUserMove(char[][] gameTable) {
        while (true) {
            System.out.println("Please type number between 1 and 9:");

            var string = new Scanner(System.in).nextLine();

            if (string.length() == 1) {
                char number = string.charAt(0);

                if (number <= '9' && number >= '1') {
                    if (makeUserMoveToCell(gameTable, number)) {
                        return;
                    }
                }
            }
        }
    }

    private static boolean makeUserMoveToCell(char[][] gameTable, char digit) {
        char[][] mappingTable = {
                {'7', '8', '9'},
                {'4', '5', '6'},
                {'1', '2', '3'},
        };

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (mappingTable[i][j] == digit) {
                    if (gameTable[i][j] == ' ') {
                        gameTable[i][j] = 'X';
                        return true;
                    } else {
                        System.out.println("Can't make a move, because the cell is not free! Try again!");
                        return false;
                    }
                }
            }
        }

        return false;
    }

    private static void makeComputerMove(char[][] gameTable) {
        if (putThirdZero(gameTable, '0')) {
            return;
        }
        if (putZeroAfterTwoX(gameTable)) {
            return;
        }
        if (putSecondZero(gameTable)) {
            return;
        }
        if (putZeroInCentre(gameTable)) {
            return;
        }

        Random random = new Random();
        while (true) {
            int row = random.nextInt(3);
            int col = random.nextInt(3);
            if (gameTable[row][col] == ' ') {
                gameTable[row][col] = '0';
                return;
            }
        }

    }

    private static boolean putZeroInCentre(char[][] gameTable) {
        if (gameTable[1][1] == ' ') {
            gameTable[1][1] = '0';
            return true;
        }

        return false;
    }

    private static boolean putSecondZero(char[][] gameTable) {
        int[][] possibleMovesArray = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (gameTable[i][j] == '0') {
                    if (moveIsPossible(gameTable, possibleMovesArray, i, j)) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    private static boolean moveIsPossible(char[][] gameTable, int[][] possibleMovesArray, int currentRowIndex, int currentColIndex) {
        for (int i = 0; i < possibleMovesArray.length; i++) {
            int rowMove = currentRowIndex + possibleMovesArray[i][0];
            int colMove = currentColIndex + possibleMovesArray[i][1];
            if (rowMove >= 0 && rowMove <= 2 && colMove >= 0 && colMove <= 2) {
                if (gameTable[rowMove][colMove] == ' ') {
                    gameTable[rowMove][colMove] = '0';
                    return true;
                }
            }
        }

        return false;
    }

    private static boolean putZeroAfterTwoX(char[][] gameTable) {
        return putThirdZero(gameTable, 'X');
    }

    private static boolean putThirdZero(char[][] gameTable, char ch) {
        for (int i = 0; i < 3; i++) {
            if (gameTable[i][0] == ch && gameTable[i][1] == ch) {
                if (gameTable[i][2] == ' ') {
                    gameTable[i][2] = '0';
                    return true;
                }
            }
            if (gameTable[i][1] == ch && gameTable[i][2] == ch) {
                if (gameTable[i][0] == ' ') {
                    gameTable[i][0] = '0';
                    return true;
                }
            }
            if (gameTable[0][i] == ch && gameTable[1][i] == ch) {
                if (gameTable[2][i] == ' ') {
                    gameTable[2][i] = '0';
                    return true;
                }
            }
            if (gameTable[1][i] == ch && gameTable[2][i] == ch) {
                if (gameTable[0][i] == ' ') {
                    gameTable[0][i] = '0';
                    return true;
                }
            }
        }

        if (gameTable[0][0] == ch && gameTable[1][1] == ch) {
            if (gameTable[2][2] == ' ') {
                gameTable[2][2] = '0';
                return true;
            }
        }
        if (gameTable[1][1] == ch && gameTable[2][2] == ch) {
            if (gameTable[0][0] == ' ') {
                gameTable[0][0] = '0';
                return true;
            }
        }

        if (gameTable[0][2] == ch && gameTable[1][1] == ch) {
            if (gameTable[2][0] == ' ') {
                gameTable[2][0] = '0';
                return true;
            }
        }
        if (gameTable[2][0] == ch && gameTable[1][1] == ch) {
            if (gameTable[0][2] == ' ') {
                gameTable[0][2] = '0';
                return true;
            }
        }

        return false;
    }

    private static boolean isUserWin(char[][] gameTable) {
        if (isComputerWin(gameTable, 'X')) {
            return true;
        }
        return false;
    }

    private static boolean isComputerWin(char[][] gameTable, char ch) {
        for (int i = 0; i < 3; i++) {
            if (gameTable[i][0] == ch && gameTable[i][1] == ch && gameTable[i][2] == ch) {
                return true;
            }
            if (gameTable[0][i] == ch && gameTable[1][i] == ch && gameTable[2][i] == ch) {
                return true;
            }
        }

        if (gameTable[0][0] == ch && gameTable[1][1] == ch && gameTable[2][2] == ch) {
            return true;
        }
        if (gameTable[0][2] == ch && gameTable[1][1] == ch && gameTable[2][0] == ch) {
            return true;
        }

        return false;
    }

    private static boolean isDraw(char[][] gameTable) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (gameTable[i][j] == ' ') {
                    return false;
                }
            }
        }

        return true;
    }
}
